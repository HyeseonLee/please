A. Django는 다음 사항이 가능합니다:

* 여러 운영 체제에서 설치가 가능합니다.
* 소스에서, 파이썬 패키지 인덱스(PyPi)에서 그리고 많은 경우 호스트 컴퓨터의 패키지 매니저 어플리케이션에서 설치가 가능합니다.
* 별도로 설치 및 구성되어있어야 하는 여러가지 데이터베이스 중 하나를 사용하도록 설정할 수 있습니다.
* 메인 시스템의 파이썬 환경 또는 별도의 파이썬 가상 환경에서 실행됩니다.

B. Django는 어디서 다운로드 할 수 있나요?
--> 장고를 파이썬 가상환경에 설치할거에요.

C. Python3 설치
* Django를 사용하려면 먼저 python을 설치해야해요.
* 기본으로 우분투 18.04 LTS는 파이썬 3.6.6을 기본적으로 포함하고 있어, 근데 파이썬3의 패키지 설치를 위한 Python Package Index tool(장고를 포함)는 기본적으로 설치되어있지 않다. 
--> bash terminal에서 
sudo apt install python3-pip 
입력하면 할 수 있어 
* 단, 

D. Python 가상환경에서 Django사용하기
* 우리가 가상 환경을 만드는 데 사용할 라이브러리들은 virtualenvwrapper(리눅스, 맥) 그리고 virtualenvwrapper-win(윈도우)이다. 둘다 virtualenv 도구를 사용한다. wrapper 도구는 모든 플랫폼의 인터페이스를 관리하기 위한 일관적인 인터페이스를 생성한다.

*파이썬, pip이 설치가 되었다면!!!!! -> virtualenv를 포함하는 virtualenvwrapper를 설치할 수 있다.
--> sudo pip3 install virtualenvwrapper
* shell 스타트업 파일(.bashrc)의 끝에 
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
를 추가하고!!

source ~/.bashrc
를 해서 setting을 적용시킨다.

* 이제 mkvirtualenv 명령어로 새로운 가상환경 생성할 수 있다!!

E. 가상환경 생성하기
* mkvirtualenv 가상환경이름

F. 가상환경 사용하기
* deactivate : 활성화된 파이썬 가상 환경을 비활성화한다.
* workon : 사용가능한 가상 환경 목록을 보여준다.
* wokon name_of_environment : 특정 파이썬 가상 환경을 활성화한다.
* rmvirtualenv name_of_environment : 특정 가상환경을 삭제한다.

G. Django 설치하기(가상환경 안에서 열어요!!)
1. 가상환경 하나 생성
2. wokon으로 호출해서 활성화
3. pip3 install django
3-1. 장고 버전 확인 : python3 -m django --version

H. 이후에 과정은 거의 유사하다.
* python3 manage.py runserver


I.
sudo apt-get install python3-pip
pip3 install virtualenv
virtualenv venv
source venv/bin/activate
pip3 install django
django-admin startproject app .
python3 manage.py runserver
Windows Chrome: https://127.0.0.1:8000 port forwarding is already enabled by default from WSL

왜 굳이 Linux?
* 인공지능, 머신러닝, 클라우드 -> OS의 일부 기능들을 써야한다.
* OS 개발자야. 우리가. kernel 개발자야. 

* Windows 10 WSL
: kernel의 기능을 확장시키는 느낌이야!
: 소프트웨어는 게을러야 발전한다...?
코어는 만들어두고, 코어에 연동되는 로직을 뚫어둔거야.
: 통로를 딱 맞게 코딩해두면 된다.


